@{
    ViewBag.Title = "AccountManagement1";
    Layout = "~/Areas/Manager/Views/Shared/_Layout.cshtml";
}

<div class="container-content" style="margin-top :60px">
        <div class="sidebar">
            <nav>
                <ul class="menu">
                    <li>
                    <a href="@Url.Action("Index", "Home", new { area = "Manager" })">
                        <i class="bi bi-credit-card"></i>
                            <span>Dashboard</span>
                        </a>
                    </li>
                    <li class="active">
                     <a href="@Url.Action("AccountManagement1", "Home", new { area = "Manager" })">
                        <i class="fas fa-user"></i>
                            <span>Account</span>
                     </a>
                    </li>
                <li>
                    <a href="@Url.Action("payHistory", "Home", new { area = "Manager" })">
                        <i class="bi bi-currency-exchange"></i>
                        <span>Pay History</span>
                    </a>
                </li>
                <li>
                    <a href="@Url.Action("MenuManager", "Home", new { area = "Manager" })">
                        <i class="bi bi-list"></i>
                        <span>Menu Manager</span>
                    </a>
                    </li>
                    <li>
                        <a href="#">
                            <i class="fas fa-user"></i>
                            <span>Procedures</span>
                        </a>
                    </li>
                    <li>
                        <a href="#">
                            <i class="fas fa-user"></i>
                            <span> Manager</span>
                        </a>
                    </li>
                    <li>
                        <a href="#">
                            <i class="fas fa-user"></i>
                            <span> Service(..)</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
        <div class="main-content">
            <div class="popup-overlay" id="popupOverlay" onclick="closePopup()"></div>
            <div class="popup" id="infoPopup">
                <div class="popup-header">
                    <h3 id="popupTitle">Account Details</h3>
                    <span class="popup-close" onclick="closePopup()">×</span>
                </div>
                <form id="accountForm">
                    <table class="Info">
                        <tbody id="infoTableBody"></tbody>
                    </table>
                    <div style="margin-top: 15px; display: flex; justify-content: space-between;">
                        <button type="button" onclick="submitForm()" id="submitButton">Update</button>
                        <button type="button" onclick="deleteAccount()" id="deleteButton">Delete</button>
                    </div>
                </form>
            </div>
            <div class="AccountBody">
                <div class="content-text">
                    <h2>Account Management</h2>
                    <div class="AccountFunction">
                        <div class="AccountSearch">
                            <input id="search" type="search" placeholder="Search..." autofocus required
                                   oninput="searchAccounts()" />
                        </div>
                        <div class="AccountCreate">
                            <button onclick="showCreatePopup()">Create</button>
                        </div>
                    </div>

                    <div class="AccountView">
                        <div class="AccountList">
                            <table class="List">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Username</th>
                                        <th>Password</th>
                                        <th>User's Name</th>
                                        <th>Phone_Number</th>
                                        <th>Address</th>
                                        <th>Gender</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                    </tr>
                                </thead>
                                <tbody id="accountTableBody">
                                    <!-- Account rows will be dynamically inserted here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </div>
<script>
    let accounts = [];
    renderAccountTable(accounts);

    function renderAccountTable(accounts) {
        const tbody = document.getElementById('accountTableBody');
        tbody.innerHTML = ''; // Xóa nội dung cũ

        accounts.forEach(account => {
            const row = document.createElement('tr');
            row.onclick = () => showPopup(account.id);

            row.innerHTML = `
                        <td>${account.status === 1 ? 'Unlock' : 'Lock'}</td>
                        <td>${account.username}</td>
                        <td>${account.password}</td>
                        <td>${account.name}</td>
                        <td>${account.phoneNumber}</td>
                        <td>${account.address}</td>
                        <td>${account.gender === 1 ? 'Male' : 'Female'}</td>
                        <td>${account.email}</td>
                        <td>${account.roleDescription}</td>
                    `;

            tbody.appendChild(row);
        });
    }


    async function loadAccounts() {
        try {
            const response = await fetch('/api/account/getallacc');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const accounts = await response.json();
            renderAccountTable(accounts);
        } catch (error) {
            console.error('Error fetching accounts:', error);
        }
    }


    async function createNewStaffAccount(accountData) {
        const response = await fetch('api/account/addstaff', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(accountData)
        });
        if (response.ok) {
            await loadAccounts();
        } else {
            console.error('Error creating account:', await response.text());
        }
    }

    async function manageStatus(username) {
        const response = await fetch(`/api/account/status/${username}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status })
        });
        if (response.ok) {
            await loadAccounts();
        } else {
            console.error('Error managing status:', await response.text());
        }
    }

    async function deleteAccount(username) {
        const response = await fetch(`/api/account/delete/${username}`, {
            method: 'DELETE'
        });
        if (response.ok) {
            await loadAccounts();
        } else {
            console.error('Error deleting account:', await response.text());
        }
    }

    function showPopup(id) {
        const account = id ? accounts.find(a => a.id === id) : {};
        const isNewAccount = !id;

        document.getElementById('popupTitle').textContent = isNewAccount ? 'Create New Account' : 'Edit Account';

        const fields = [
            {
                name: 'status', label: 'Status', type: 'select', options: [
                    { value: 1, text: 'Unlock' },
                    { value: 0, text: 'Lock' } // Changed to 0 for Lock
                ]
            },
            { name: 'username', label: 'Username', type: 'text' },
            { name: 'password', label: 'Password', type: 'password' },
            { name: 'name', label: "User 's Name", type: 'text' },
            { name: 'phone', label: 'Phone Number', type: 'text' },
            { name: 'address', label: 'Address', type: 'text' },
            {
                name: 'gender', label: 'Gender', type: 'select', options: [
                    { value: 1, text: 'Male' },
                    { value: 0, text: 'Female' }
                ]
            },
            { name: 'email', label: 'Email', type: 'text' },
            { name: 'verificationCode', label: 'Verification Code', type: 'text' },
            {
                name: 'roleId', label: 'Role ID', type: 'select', options: [
                    { value: 1, text: 'Manager' },
                    { value: 2, text: 'Order Taker' },
                    { value: 3, text: 'Procurement Manager' },
                    { value: 4, text: 'Server Staff' },
                    { value: 5, text: 'Customer Service Staff' },
                    { value: 6, text: 'Food Runner' },
                    { value: 7, text: 'Customer' }
                ]
            }
        ];

        const infoTableBody = document.getElementById('infoTableBody');
        infoTableBody.innerHTML = fields.map(field => `
                    <tr>
                        <td><strong>${field.label}</strong></td>
                        <td>
                            ${field.type === 'select'
                ? `<select id="${field.name}">
                                    ${field.options.map(option => `
                                        <option value="${option.value}" ${account[field.name] == option.value ? 'selected' : ''}>
                                            ${option.text}
                                        </option>`).join('')}
                                   </select>`
                : `<input type="${field.type}" id="${field.name}" value="${account[field.name] || ''}" ${field.readonly ? 'readonly' : ''}>`
            }
                        </td>
                    </tr>`).join('');

        // Set the status to the correct value for existing accounts
        if (account.status !== undefined) {
            document.getElementById('status').value = account.status;
        }

        document.getElementById('updateButton').textContent = isNewAccount ? 'Create' : 'Update';
        document.getElementById('deleteButton').style.display = isNewAccount ? 'none' : 'block';

        document.getElementById('popupOverlay').style.display = 'block';
        document.getElementById('infoPopup').style.display = 'block';
    }

    function showCreatePopup() {
        showPopup();
    }

    function closePopup() {
        document.getElementById('popupOverlay').style.display = 'none';
        document.getElementById('infoPopup').style.display = 'none';
    }

    function submitForm() {
        const formData = {};
        document.querySelectorAll('#infoTableBody input, #infoTableBody select').forEach(input => {
            formData[input.id] = input.value;
        });

        if (formData.id) {
            const index = accounts.findIndex(a => a.id === parseInt(formData.id));
            if (index !== -1) {
                accounts[index] = { ...accounts[index], ...formData };
            }
        } else {
            formData.id = accounts.length + 1;
            accounts.push(formData);
        }

        localStorage.setItem('accounts', JSON.stringify(accounts));
        renderAccountTable();
        closePopup();
    }

    function deleteAccount() {
        const id = parseInt(document.getElementById('id').value);
        accounts = accounts.filter(account => account.id !== id);

        localStorage.setItem('accounts', JSON.stringify(accounts));
        renderAccountTable();
        closePopup();
    }

    function searchAccounts() {
        const searchValue = document.getElementById('search').value.toLowerCase();
        const rows = document.querySelectorAll('#accountTableBody tr');

        rows.forEach(row => {
            const rowText = Array.from(row.cells).map(cell => cell.innerText.toLowerCase()).join(' ');
            row.style.display = rowText.includes(searchValue) ? '' : 'none';
        });
    }

    document.addEventListener('DOMContentLoaded', loadAccounts);
</script>
