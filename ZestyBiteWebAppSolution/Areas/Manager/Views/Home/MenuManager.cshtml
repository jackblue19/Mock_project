
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Manager/Views/Shared/_Layout.cshtml";
}
﻿<style>
         .text-center {
             overflow: auto;
             width: 100%;
         }
         .text-content{
             color: black;
         }
             /* Container styling for the menu */
     .MenuView {
         padding: 1rem;
     }

     .MenuList {
         overflow-x: auto; /* Allows horizontal scrolling for smaller screens */
     }

     /* Table styling */
     .List-Menu {
         width: 100%;
         border-collapse: collapse;
         margin-top: 1rem;
     }

     .List-Menu th, .List-Menu td {
         padding: 0.75rem;
         border: 1px solid #ddd;
         text-align: center;
     }

     .List-Menu th {
         background-color: rgba(113, 99, 186, 255);
         color: #fff;
         font-weight: bold;
         font-size: 1rem;
     }

     .List-Menu tbody td {
         background-color: #f9f9f9;
         font-size: 0.95rem;
     }

     /* Alternating row colors for better readability */
     .List-Menu tbody tr:nth-child(even) td {
         background-color: #f1f1f1;
     }
     /* Image styling for table cells */
     .item-image {
         width: 50px;
         height: 50px;
         border-radius: 5px;
     }

     #data td {
         color: black !important;
     }

</style>
<div class="container-content" style="margin-top : 37px">
    <div class="sidebar">
        <nav>
            <ul class="menu">
                <li>
                    <a href="@Url.Action("Index", "Home", new { area = "Manager" })">
                        <i class="bi bi-credit-card"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li>
                    <a href="@Url.Action("AccountManagement1", "Home", new { area = "Manager" })">
                        <i class="fas fa-user"></i>
                        <span>Account</span>
                    </a>
                </li>
                <li>
                    <a href="@Url.Action("payHistory", "Home", new { area = "Manager" })">
                        <i class="bi bi-currency-exchange"></i>
                        <span>Pay History</span>
                    </a>
                </li>
                <li class="active">
                    <a href="@Url.Action("MenuManager", "Home", new { area = "Manager" })">
                        <i class="bi bi-list"></i>
                        <span>Menu Manage</span>
                    </a>
                </li>
                <li>
                    <a href="#">
                        <i class="fas fa-user"></i>
                        <span>Procedures</span>
                    </a>
                </li>
                <li>
                    <a href="#">
                        <i class="fas fa-user"></i>
                        <span> Service(..)</span>
                    </a>
                </li>

            </ul>
        </nav>
    </div>
    <div class="text-center">
        <section class="p-3">
            <div class="content-text"><h1 style="color: black;font-weight: bold;">MenuManagement</h1></div>
            <div class="col-12">
                <button class="btn btn-primary" data-toggle="modal" data-target="#ItemForm">New Item</button>

                <!--search-->
                <div class="group">
                    <svg viewBox="0 0 24 24" aria-hidden="true" class="search-icon">
                        <g>
                            <path d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z"></path>
                        </g>
                    </svg>

                    <input id="query"
                           class="input"
                           type="search"
                           placeholder="Search..."
                           name="searchbar" />
                </div>

            </div>
        </section>

        <div class="MenuView">
            <div class="MenuList">
                <table class="List-Menu">
                    <thead>
                        <tr>
                            <th>No</th>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Description</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody class="menuText" style="color: black !important" id="data">
                    </tbody>
                </table>
            </div>
        </div>
        <div id="pagination" class="mt-3"></div>
    </div>
</div>
<!-- add item-->
<div class="modal fade" id="ItemForm">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="ItemFormLabel">Add Item</h4>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form action="#" id="myForm">
                    <div class="inputField">
                        <div>
                            <label for="image">Image</label>
                            <input type="file" id="image" name="image" accept="image/*">
                            <br>
                            <img id="imagePreview" src="" alt="Image Preview" style="max-width: 100%; display: none;">
                        </div>
                        <div>
                            <label for="productName">Name</label>
                            <input type="text" id="productName" name="productName">
                        </div>
                        <div>
                            <label for="category">Category</label>
                            <select id="category" name="category">
                                <option value="Pizza">Pizza</option>
                                <option value="Pasta">Pasta</option>
                                <option value="Drink">Drink</option>
                                <option value="Salad">Salad</option>
                                <option value="Burgers">Burgers</option>
                            </select>
                        </div>
                        <div>
                            <label for="price">Price</label>
                            <input type="text" id="price" name="price">
                        </div>
                        <div>
                            <label for="description">Description</label>
                            <input type="text" id="description" name="description">
                        </div>
                        <div>
                            <label for="status">Status</label>
                            <select id="status" name="status">
                                <option value="Still">Still</option>
                                <option value="Sold Out">Sold Out</option>
                            </select>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-warning" id="submitBtn">Create</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Read Supply Form -->
<div class="modal fade" id="readData">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Supply Details</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form action="#" id="myForm">
                    <div class="inputField">
                        <div>
                            <label for="productName">Product Name</label>
                            <input type="text" id="productName" disabled>
                        </div>
                        <div>
                            <label for="category">Category</label>
                            <input type="text" id="category" disabled>
                        </div>
                        <div>
                            <label for="price">Price</label>
                            <input type="text" id="price" disabled>
                        </div>
                        <div>
                            <label for="description">Description</label>
                            <input type="text" id="description" disabled>
                        </div>
                        <div>
                            <label for="status">Status</label>
                            <input type="text" id="status" disabled>
                        </div>
                        <div>
                            <label for="imagePreview">Image</label>
                            <img id="imagePreview" src="" alt="Image Preview" style="width: 200px;height: 50px; display: none;">
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    // Lấy danh sách menu từ API và hiển thị lên bảng
    // Hàm lấy danh sách menu từ API và hiển thị lên bảng
    async function getMenu() {
        try {
            const response = await fetch('/api/item/viewmenu');
            const menuItems = await response.json();

            console.log(menuItems);  // Kiểm tra lại cấu trúc dữ liệu từ API

            const dataTable = document.getElementById('data');
            dataTable.innerHTML = ''; // Xóa dữ liệu cũ trước khi hiển thị danh sách mới

            if (Array.isArray(menuItems) && menuItems.length > 0) {
                menuItems.forEach((item, index) => {
                    // Ánh xạ itemStatus từ số thành chuỗi
                    const statusText = item.itemStatus === 1 ? 'Still' : 'Sold Out';
                    const { text, badgeClass } = getStatusAndBadgeClass(statusText);

                    // Kiểm tra nếu giá trị null và thay thế bằng 'N/A'
                    const itemName = item.itemName || 'N/A';
                    const itemCategory = item.itemCategory || 'N/A';
                    const suggestedPrice = item.suggestedPrice ? item.suggestedPrice.toFixed(2) : 'N/A'; // Format giá nếu có
                    const itemDescription = item.itemDescription || 'N/A';
                    const itemImage = item.itemImage || 'path/to/default-image.jpg'; // Đảm bảo có ảnh mặc định nếu không có

                    const row = document.createElement('tr');
                    row.id = `menu-row-${item.itemId}`;

                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td><img src="${itemImage}" alt="${itemName}" class="item-image" style="width: 50px; height: 50px;"></td>
                        <td>${itemName}</td>
                        <td>${itemCategory}</td>
                        <td>${suggestedPrice}</td>
                        <td>${itemDescription}</td>
                        <td><span class="badge ${badgeClass}">${text}</span></td>
                        <td>
                            <button class="btn btn-success" onclick="viewMenu(${item.itemId})" data-toggle="modal" data-target="#readData"><i class="bi bi-eye"></i></button>
                            <button class="btn btn-primary" onclick="editMenu(${item.itemId})" data-toggle="modal" data-target="#updateMenuModal"><i class="bi bi-pencil-square"></i></button>
                            <button class="btn btn-danger" onclick="deleteMenu(${item.itemId})"><i class="bi bi-trash3"></i></button>
                        </td>
                    `;
                    dataTable.appendChild(row);
                });
            } else {
                dataTable.innerHTML = '<tr><td colspan="7">No menu items available.</td></tr>';
            }
        } catch (error) {
            console.error('Error fetching menu items:', error);
            const dataTable = document.getElementById('data');
            dataTable.innerHTML = '<tr><td colspan="7">Failed to load menu items.</td></tr>';
        }
    }

    // Hàm để xác định trạng thái và badge của món ăn (Still/Sold Out)
    function getStatusAndBadgeClass(status) {
        let text = '';
        let badgeClass = '';
        if (status === 'Still') {
            text = 'Available';
            badgeClass = 'badge-success';
        } else if (status === 'Sold Out') {
            text = 'Sold Out';
            badgeClass = 'badge-danger';
        } else {
            text = 'Unknown';
            badgeClass = 'badge-secondary';
        }
        return { text, badgeClass };
    }

    // Khi trang tải xong, gọi hàm getMenu để lấy danh sách
    window.onload = () => {
        getMenu();  // Gọi ngay khi trang tải lần đầu
    }

    // Hàm tạo món ăn mới
    async function createMenu(event) {
        event.preventDefault();  // Ngừng sự kiện mặc định của form (không làm reload trang)

        // Lấy giá trị từ form
        const productName = document.getElementById('productName').value;
        const category = document.getElementById('category').value;
        const price = document.getElementById('price').value;
        const description = document.getElementById('description').value;
        const status = document.getElementById('status').value;

        // Lấy hình ảnh từ input file (nếu có)
        const imageInput = document.getElementById('image');
        const imageFile = imageInput.files[0];
        let imageUrl = '';

        // Nếu có ảnh, bạn cần upload ảnh trước và lấy URL
        if (imageFile) {
            imageUrl = await convertImageToBase64(imageFile);
        } else {
            imageUrl = '/images/default-image.jpg';
        }

        // Tạo đối tượng dữ liệu theo định dạng JSON
        const newDish = {
            itemName: productName,
            itemCategory: category,
            originalPrice: null,  // Bạn có thể thay đổi nếu cần
            itemStatus: status === 'Still' ? 1 : 0,
            itemDescription: description,
            suggestedPrice: parseFloat(price),  // Chuyển giá thành số thực
            itemImage: imageUrl,
            isServed: 1  // Bạn có thể thay đổi nếu cần
        };

        try {
            // Gửi yêu cầu POST tới API
            const response = await fetch('/api/item/newdish', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(newDish)  // Chuyển đổi dữ liệu thành JSON
            });

            if (response.ok) {
                // Nếu món ăn được tạo thành công, đóng modal và tải lại danh sách menu
                alert('Item created successfully!');
                $('#ItemForm').modal('hide');  // Đóng modal
                getMenu();  // Tải lại danh sách menu
            } else {
                // Nếu có lỗi từ API
                alert('Failed to create item!');
            }
        } catch (error) {
            console.error('Error creating menu item:', error);
            alert('An error occurred while creating the item.');
        }
    }

    // JavaScript: Hiển thị ảnh người dùng đã chọn
    document.getElementById('image').addEventListener('change', function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                // Hiển thị ảnh trong preview
                const imagePreview = document.getElementById('imagePreview');
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block';
            };
            reader.readAsDataURL(file);  // Chuyển ảnh thành Base64
        }
    });

    // Hàm chuyển đổi ảnh thành Base64
    async function convertImageToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = function (e) {
                resolve(e.target.result);  // Trả về chuỗi Base64
            };
            reader.onerror = function (error) {
                reject(error);
            };
            reader.readAsDataURL(file);  // Chuyển ảnh thành Base64
        });
    }

    // Gắn hàm createMenu vào sự kiện submit của form
    document.getElementById('myForm').addEventListener('submit', createMenu);

</script>