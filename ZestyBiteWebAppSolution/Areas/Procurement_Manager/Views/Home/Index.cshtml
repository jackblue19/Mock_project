@{
    ViewBag.Title = "Supply";
    Layout = "~/Areas/Procurement_Manager/Views/Shared/_Layout.cshtml";

}

<style>
    .AccountBody {
        height: 100%;
        width: 100%;
    }

    .AccountFunction {
        width: 100%;
        display: flex;
        flex-direction: row;
        color: #000;
    }

        .AccountFunction * {
            font-size: 24px;
            /* This will apply to all child elements */
        }

    .AccountSearch {
        width: 50%;
        height: 80px;
        display: flex;
        margin-left: 15px;
        justify-content: flex-start;
        align-items: center;
    }

    .AccountCreate {
        width: 50%;
        height: 80px;
        display: flex;
        margin-right: 15px;
        justify-content: flex-end;
        align-items: center;
    }


    /* Account Gridview */
    .AccountView {
        width: 100%;
        height: 500px;
        display: flex;
        justify-content: center;
    }

    .AccountList {
        overflow-y: scroll;
        margin-left: 15px;
        margin-right: 15px;
        background-color: #FDFCE5;
        width: 100%;
        border: 2px solid #000;
        /* Border for AccountList */
        border-radius: 10px;
        /* Rounded corners */
        padding: 10px;
        /* Optional padding */
    }

        .AccountList::-webkit-scrollbar {
            width: 0px;
            /* Thinner scrollbar width */
        }

    .content-text h2 {
        display: grid;
        justify-content: center;
        font-size: 40px;
        margin: 0;
        font-weight: bold;
        color: #000
    }
    /* table style -----------------------------------------------------------*/

    table {
        width: 100%;
        border-collapse: collapse;
    }

        table.List th,
        table.List td {
            color: black;
            text-align: center;
            /* Center-align text within table cells */
            padding: 8px;
            /* Padding within table cells for better readability */
            vertical-align: middle;
            /* Ensures text is vertically centered */
        }

    thead th {
        position: sticky;
        top: 0;
        /* Keeps the header at the top while scrolling */
        background-color: rgba(113, 99,186,255);
        /* Optional: background color for the header */
        color: rgb(0, 0, 0);
        /* Optional: text color for better contrast */
        padding: 10px;
        z-index: 1;
        /* Ensure it stays above other table content */
        border-bottom: 2px solid #ddd;
        /* Adds a bottom border to the sticky header */
        border-top: 2px solid #ddd;
        /* Adds a top border if needed */
        z-index: 1;
        /* Keeps the header above table content */
        /* Optional: border styling */
    }

    th,
    td {
        border: 1px solid #000;
        word-wrap: break-word;
    }

        th:nth-child(1),
        td:nth-child(1) {
            width: 30px;
            word-wrap: break-word;
            /* Ensure long text wraps instead of overflowing */
        }

    /* Popup styles ---------------------------------------------------------------*/
    .popup-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }

    .popup {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 50%;
        background-color: #FDFCE5;
        border: 1px solid #333;
        padding: 20px;
        z-index: 1000;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        border-radius: 8px;
    }


    .popup-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

        .popup-header h3 {
            color: #000000;
        }


    .popup-close {
        cursor: pointer;
        font-size: 1.5em;
        color: #333;
    }

    /* Add styles for input fields in the popup */
    .popup input[type="text"],
    .popup input[type="password"],
    .popup select {
        width: 100%;
        padding: 5px;
        margin-bottom: 5px;
    }

    /* footer --------------------------------------------------- */
    .footer {
        height: 15px;
        background-color: #D0CECA;
    }

    table.List tr:nth-child(odd) {
        background-color: #ffffff; /* Màu đậm cho hàng lẻ */
    }

    table.List tr:nth-child(even) {
        background-color: #dcdada; /* Màu đậm cho hàng chẵn */
    }


</style>
<!-- AdminPage Heading -->
<div class="text-center mt-5" style="background-color: #D0CECA;height : 100vh">
    <section class="p-3">
        <div class="col-12" style="margin-top : 20px">
            <button class="btn btn-primary" data-toggle="modal" data-target="#SupplyForm">New Supply</button>
            <!--search-->
            <div class="group">
                <svg viewBox="0 0 24 24" aria-hidden="true" class="search-icon">
                </svg>

                <input id="query"
                       class="input"
                       type="search"
                       placeholder="Search..."
                       name="searchbar" />
            </div>

        </div>
        <div class="AccountView">
            <div class="AccountList">
                <table class="List">
                    <thead>
                        <tr>
                            <th>NO</th>
                            <th>Suppier ID</th>
                            <th>Product Name</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Date Import</th>
                            <th>Date Expiration</th>
                            <th>Supply Category</th>
                            <th>Status</th>
                            <th>Action</th>

                        </tr>
                    </thead>
                    <tbody id="data">
                    </tbody>
                </table>
            </div>
        </div>
    </section>
    <!-- Supply Form -->
    <div class="modal fade" id="SupplyForm">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Supply Form</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="supplyForm">
                        <div class="inputField">
                            <div>
                                <label for="productName">Product Name</label>
                                <input type="text" id="productName" required>
                            </div>
                            <div>
                                <label for="quantity">Quantity</label>
                                <input type="number" id="quantity" min="1" required>
                            </div>
                            <div>
                                <label for="price">Price</label>
                                <input type="number" id="price" step="0.01" required>
                            </div>
                            <div>
                                <label for="DateI">Date Import</label>
                                <input type="date" id="DateI" required>
                            </div>
                            <div>
                                <label for="DateE">Date Expiration</label>
                                <input type="date" id="DateE" required>
                            </div>
                            <div>
                                <label for="vName">Vendor Name</label>
                                <input type="text" id="vName" required>
                            </div>
                            <div>
                                <label for="vendorPhone">Vendor Phone</label>
                                <input type="text" id="vendorPhone" minlength="11" maxlength="11" required>
                            </div>
                            <div>
                                <label for="vAdress">Vendor Address</label>
                                <input type="text" id="vAdress" required>
                            </div>
                            <div>
                                <label for="category">Supply Category</label>
                                <select id="category" required>
                                    <option value="food">Food</option>
                                    <option value="drink">Drink</option>
                                    <option value="facility">Facility</option>
                                </select>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-warning">Create Supply</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="readData">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Supply Details</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="#" id="myForm">
                        <div class="inputField">
                            <div>
                                <label for="productName">Product Name</label>
                                <input type="text" name="" id="productName" disabled>
                            </div>
                            <div>
                                <label for="quantity">Quantity</label>
                                <input type="text" name="" id="quantity" disabled>
                            </div>
                            <div>
                                <label for="price">Price</label>
                                <input type="text" name="" id="price" disabled>
                            </div>
                            <div>
                                <label for="DateI">Date Import</label>
                                <input type="date" name="" id="DateI" disabled>
                            </div>
                            <div>
                                <label for="DateE">Date Expiration</label>
                                <input type="date" name="" id="DateE" disabled>
                            </div>
                            <div>
                                <label for="vName">Vendor Name</label>
                                <input type="text" name="" id="vName" disabled>
                            </div>
                            <div>
                                <label for="vendorPhone">Vendor Phone</label>
                                <input type="text" name="" id="vendorPhone" minlength="11" maxlength="11" disabled>
                            </div>
                            <div>
                                <label for="vAdress">Vendor Adress</label>
                                <input type="text" name="" id="vAdress" disabled>
                            </div>
                            <div>
                                <label for="category">Supply Category</label>
                                <select id="category" name="category">
                                    <option value="food" disabled>Food</option>
                                    <option value="drink" disabled>Drink</option>
                                    <option value="facility" disabled>Facility</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

    </div>

    <!-- Update Supply Modal -->
    <div class="modal fade" id="updateSupplyModal" tabindex="-1" role="dialog" aria-labelledby="updateSupplyLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateSupplyLabel">Update Supply</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="updateSupplyForm">
                        <input type="hidden" id="updateSupplyId">
                        <div class="form-group">
                            <label for="updateProductName">Product Name</label>
                            <input type="text" id="updateProductName" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="updateQuantity">Quantity</label>
                            <input type="number" id="updateQuantity" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="updatePrice">Price</label>
                            <input type="number" id="updatePrice" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="updateDateImport">Date Import</label>
                            <input type="date" id="updateDateImport" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="updateDateExpiration">Date Expiration</label>
                            <input type="date" id="updateDateExpiration" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="updateVendorName">Vendor Name</label>
                            <input type="text" id="updateVendorName" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="updateVendorPhone">Vendor Phone</label>
                            <input type="text" id="updateVendorPhone" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="updateVendorAddress">Vendor Address</label>
                            <input type="text" id="updateVendorAddress" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="updateCategory">Supply Category</label>
                            <select id="updateCategory" class="form-control" required>
                                <option value="food">Food</option>
                                <option value="drink">Drink</option>
                                <option value="facility">Facility</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Update Supply</button>
                    </form>
                </div>
            </div>
        </div>
    </div>


</div>
<script>
    // LIST
    async function getSupplies() {
        try {
            const response = await fetch('/api/supply');  // Gọi API backend
            const supplies = await response.json();  // Dữ liệu trả về dạng JSON

            // Lấy bảng và thêm dữ liệu vào bảng
            const dataTable = document.getElementById('data');

            supplies.forEach((supply, index) => {
                const { text, badgeClass } = getStatusAndBadgeClass(supply.supplyStatus);
                const row = document.createElement('tr');
                row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${supply.supplyId}</td>
                        <td>${supply.productName}</td>
                        <td>${supply.supplyQuantity}</td>
                        <td>${supply.supplyPrice}</td>
                        <td>${new Date(supply.dateImport).toLocaleDateString()}</td>
                        <td>${new Date(supply.dateExpiration).toLocaleDateString()}</td>
                         <td>${supply.supplyCategory}</td>
                         <td><span class="badge ${badgeClass}">${text}</span></td>   
                        <td>
                            <button class="btn btn-success" data-toggle="modal" data-target="#readData"><i class="bi bi-eye"></i></button>
            <button class="btn btn-primary" onclick="editSupply(${supply.supplyId})" data-toggle="modal" data-target="#updateSupplyModal">
                <i class="bi bi-pencil-square"></i>
            </button>
                            <button class="btn btn-danger"><i class="bi bi-trash3"></i></button>
                        </td>
                    `;
                dataTable.appendChild(row);
            });
        } catch (error) {
            console.error('Error fetching supplies:', error);
        }
    }

    // Gọi hàm để lấy thông tin khi trang được tải
    window.onload = getSupplies;

    function getStatusAndBadgeClass(supplyStatus) {
        if (supplyStatus === 1) {
            return { text: "Still", badgeClass: "bg-success" };
        } else if (supplyStatus === 0) {
            return { text: "Expired", badgeClass: "bg-danger" };
        } else {
            return { text: "Unknown", badgeClass: "bg-secondary" };
        }
    }
    //Update
    document.getElementById("updateSupplyForm").addEventListener("submit", async function (event) {
        event.preventDefault();

        const supplyId = document.getElementById("updateSupplyId").value;

        const updatedSupply = {
            productName: document.getElementById("updateProductName").value,
            supplyQuantity: parseInt(document.getElementById("updateQuantity").value),
            supplyPrice: parseFloat(document.getElementById("updatePrice").value),
            dateImport: document.getElementById("updateDateImport").value,
            dateExpiration: document.getElementById("updateDateExpiration").value,
            vendorName: document.getElementById("updateVendorName").value,
            vendorPhone: document.getElementById("updateVendorPhone").value,
            vendorAddress: document.getElementById("updateVendorAddress").value,
            supplyCategory: document.getElementById("updateCategory").value,
            supplyStatus: 1, // Giá trị trạng thái
        };

        try {
            const response = await fetch(`http://localhost:5024/api/Supply/update/${supplyId}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(updatedSupply)
            });

            if (response.ok) {
                alert("Supply updated successfully!");
                location.reload(); // Tải lại danh sách sau khi cập nhật
            } else {
                const error = await response.json();
                console.error("Update failed:", error);
                alert("Failed to update supply: " + (error.message || "Unknown error"));
            }
        } catch (err) {
            console.error("Error updating supply:", err);
            alert("An error occurred while updating supply.");
        }
    });

    //CREATE
    document.getElementById("supplyForm").addEventListener("submit", async function (event) {
        event.preventDefault(); // Ngăn chặn reload trang mặc định

        // Thu thập dữ liệu từ form
        const supplyData = {
            productName: document.getElementById("productName").value,
            supplyQuantity: parseInt(document.getElementById("quantity").value),
            supplyPrice: parseFloat(document.getElementById("price").value),
            supplyStatus: 0, // Mặc định là "0" khi tạo mới
            dateImport: document.getElementById("DateI").value,
            dateExpiration: document.getElementById("DateE").value,
            tableId: 1, // Giá trị mặc định (hoặc thay đổi nếu cần)
            vendorName: document.getElementById("vName").value,
            vendorPhone: document.getElementById("vendorPhone").value,
            vendorAddress: document.getElementById("vAdress").value,
            supplyCategory: document.getElementById("category").value
        };

        try {
            // Gửi yêu cầu POST đến API
            const response = await fetch("http://localhost:5024/api/Supply/create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(supplyData)
            });

            if (response.ok) {
                const result = await response.json();
                alert("Supply created successfully!");
                console.log("Result:", result); // Kiểm tra kết quả trả về từ backend
                location.reload(); // Reload lại trang để hiển thị dữ liệu mới
            } else {
                const error = await response.json();
                alert("Failed to create supply: " + (error.message || "Unknown error"));
            }
        } catch (err) {
            console.error("Error creating supply:", err);
            alert("An error occurred while creating supply.");
        }
    });



</script>



