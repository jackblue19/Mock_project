@{
    ViewBag.Title = "Food Runner";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <style>
        /* General Layout */
        .foodrunner-view {
            display: flex;
            height: 100vh;
            width: 100%;
            justify-content: space-between;
            font-family: 'Arial', sans-serif;
            color: #333;
            background-color: #D0CECA;
            padding: 20px;
            border-radius: 10px;
        }

        .view-left {
            height: 90%;
            width: 48%;
            margin-top: 90px;
        }

        h1 {
            font-size: 55px;
            text-align: center;
            font-weight: bold;
        }

        h2 {
            font-size: 30px;
            text-align: center;
            font-weight: bold;
        }

        /* Food Runner Section */
        .foodrunner-account {
            text-align: center;
            margin-bottom: 20px;
            height: 20%;
        }

        .foodrunner-account img.profile-img {
            position: absolute;
            top: 10px;
            left: 10px;
            max-width: 100px;
            max-height: 100px;
            border-radius: 50%;
            border: 2px solid #000000;
        }

        /* Items Table */
        .table-detail {
            height: 80%;
        }

        .table-item {
            height: 45%;
            width: 100%;
            background-color: #56655E90;
            border: 3px solid #000;
            border-radius: 20px;
            overflow-y: auto;
        }

        /* Notes Table */
        .table-note {
            height: 25%;
            width: 100%;
            background-color: #56655E90;
            border: 3px solid #000;
            border-radius: 20px;
            overflow-y: auto;
        }


        /* right view css */
        .view-right {
            height: 90%;
            width: 48%;
            margin-top: 90px;
            display: flex;
            flex-direction: column;
        }

        .table-container {
            height: 40%;
            overflow-y: auto;
            scrollbar-width: none; /* For Firefox */
            border: 3px solid black;
            border-radius: 25px;
        }

            .table-container::-webkit-scrollbar {
                display: none; /* For Chrome, Safari, and Opera */
            }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #000000;
            text-align: center;
            font-size: 20px;
            font-style: bold;
            color: #000000;
        }

        th {
            position: sticky;
            top: 0;
            background: #71857c;
        }

        tbody tr {
            height: 30px; /* Fixed height for rows */
        }

        .status-waiting {
            background-color: #bb5959cd;
        }

        .status-served {
            background-color: #57b361cd;
        }

        .status-empty {
            background-color: #adadadcd;
        }
    </style>
</head>

<body>
  <div class="foodrunner-view row">
    <div class="view-left">
        <div class="foodrunner-account ftco-animate">
            <div class="vcard bio">
                <img src="${profileImage}" alt="Profile" class="profile-img">
            </div>
            <div class="foodrunner-header">
                <h1>Food Runner</h1>
                <div class="User " id="name"></div>
            </div>
        </div>

        <div class="table-detail ftco-animate">
            <h2 class="ftco-animate">Items</h2>
            <table class="table-item">
                <tbody class="table-detail-item ftco-animate" id="table-detail-item">
                    <!-- Item rows will be dynamically inserted here -->
                </tbody>
            </table>
            <h2 class="ftco-animate">Note</h2>
            <table class="table-note">
                <tbody class="table-detail-note ftco-animate" id="table-detail-note">
                    <!-- Note will be dynamically inserted here  -->
                </tbody>
            </table>
        </div>
    </div>
        <div class="view-right">
            <h2>Table Orders</h2>

            <div class="table-container view-table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Table</th>
                            <th>Status</th>
                            <th style="display: none;">Bill</th>
                        </tr>
                    </thead>
                    <tbody id="table-body">
                        <!-- Table orders will be dynamically inserted here -->
                    </tbody>
                </table>
            </div>

            <h2>Online Orders</h2>

            <div class="table-container view-online-container">
                <table>
                    <thead>
                        <tr>
                            <th>Table</th>
                            <th>Status</th>
                            <th style="display: none;">Bill</th>
                        </tr>
                    </thead>
                    <tbody id="online-body">
                        <!-- Online orders will be dynamically inserted here -->
                    </tbody>
                </table>
            </div>
        </div>

</div>

    <div class="footer"></div>

    <script>
        async function fetchData() {
            try {
                const realityResponse = await fetch('/api/table/reality');
                const realityData = await realityResponse.json();
                populateTable(realityData, 'table-body');

                const virtualResponse = await fetch('/api/table/virtual');
                const virtualData = await virtualResponse.json();
                populateTable(virtualData, 'online-body');
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }

        function populateTable(data, tableBodyId) {
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = ''; // Clear existing rows

            // Define the order of statuses
            const statusOrder = ['Waiting', 'Served', 'Empty'];

            // Sort the data based on the defined status order
            data.sort((a, b) => statusOrder.indexOf(a.tableStatus) - statusOrder.indexOf(b.tableStatus));

            data.forEach(item => {
                const row = document.createElement('tr');
                row.addEventListener('click', () => {
                    alert(`Table ID: ${item.tableId}`);
                });

                // Apply color based on status
                switch (item.tableStatus) {
                    case 'Waiting':
                        row.classList.add('status-waiting');
                        break;
                    case 'Served':
                        row.classList.add('status-served');
                        break;
                    case 'Empty':
                        row.classList.add('status-empty');
                        break;
                    default:
                        break;
                }

                const cell1 = document.createElement('td');
                cell1.textContent = item.tableId;

                const cell2 = document.createElement('td');
                cell2.textContent = item.tableStatus;

                const cell3 = document.createElement('td');
                cell3.textContent = item.tableBill;

                row.appendChild(cell1);
                row.appendChild(cell2);
                row.appendChild(cell3);
                tableBody.appendChild(row);
            });
        }

        // Call fetchData when the page loads
        window.onload = fetchData;
    </script>

</body>
