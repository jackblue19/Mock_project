@{
    ViewBag.Title = "Feedback";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <title>Feedback</title>
    <link href="~/css/Feedback.css" rel="stylesheet" />
</head>

<body>
    <section class="ftco-appointment" style="background-image: url(/images/bg_4.jpg);">
        <div class="container-wrap">
            <div class="feedback-text ftco-animate">
                <h1 class="text-center">Write your<br>Experience<br>Make the<br>Environment</h1>
            </div>
            <br>
            <div class="feedback-input ftco-animate">
                <div>
                    <h1 class="text-center">Feedback</h1>
                </div>
                <div>
                    <form id="feedbackForm" class="appointment-form" method="post">
                        <div class="dish-select d-md-flex">
                            <div class="search-container">
                                <input type="text" id="search-box" class="form-control" placeholder="Type to search...">
                            </div>
                            <select id="dish-select" class="form-control"></select>
                        </div>
                        <div class="message d-md-flex">
                            <textarea id="feedbackMessage" name="type-area" cols="30" rows="3" class="form-control"
                                placeholder="Message"></textarea>
                        </div>
                        <div class="submit-button">
                            <button type="submit" id="submitFeedback" class="btn btn-primary py-3 px-4">Send</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </section>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const dishSelect = document.getElementById('dish-select');
            const searchBox = document.getElementById('search-box');
            let items = []; // Store fetched items

            // Fetch items from the server
            function fetchItems() {
                return fetch('/api/feedback/items') 
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Fetched items:', data); // Log the fetched data
                        items = data; // Store the fetched items
                        populateDishSelect(items); // Populate the select element
                    })
                    .catch(error => {
                        console.error('Error fetching items:', error);
                    });
            }

            // Populate the select element with fetched items
            function populateDishSelect(items) {
                dishSelect.innerHTML = ''; // Clear existing options
                items.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.itemId; // Use item ID as the value
                    option.textContent = item.itemName; // Display item name
                    dishSelect.appendChild(option);
                });
            }

            // Filter dropdown options based on search input
            searchBox.addEventListener('input', () => {
                const searchTerm = searchBox.value.toLowerCase();
                dishSelect.innerHTML = '';
                items.forEach(item => {
                    if (item.itemName.toLowerCase().includes(searchTerm)) {
                        const option = document.createElement('option');
                        option.value = item.itemId; // Use item ID as the value
                        option.textContent = item.itemName; // Display item name
                        dishSelect.appendChild(option);
                    }
                });
                // If search box is empty, repopulate with all items
                if (searchTerm === '') {
                    populateDishSelect(items);
                }
            });

            searchBox.addEventListener('blur', () => { 
                const searchTerm = searchBox.value.toLowerCase(); 
                if (searchTerm === '') 
                { 
                    populateDishSelect(items); 
                } 
            }); 

            // Fetch items and populate select element
            fetchItems();

            document.getElementById('submitFeedback').addEventListener('click', function (event) {
                event.preventDefault(); // Prevent default form submission

                const feedbackMessage = document.getElementById('feedbackMessage').value; // Get the feedback message
                const selectedDishId = dishSelect.value; // Get the selected dish ID
                const selectedItem = items.find(item => item.itemId == selectedDishId);
                const itemName = selectedItem ? selectedItem.itemName : "Unknown Item"; // Fallback if not found
                const parentFeedbackId = null; // Set ParentFb to null as per your requirement

                fetch('/api/feedback/submitfeedback', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        Content: feedbackMessage, 
                        ItemId: selectedDishId, 
                        ItemName: itemName, 
                        ParentFb: null,
                        Fullname: "",
                    })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        const notification = document.createElement('div');
                        notification.textContent = 'Feedback submitted successfully! Redirecting to Blog...';
                        notification.style.position = 'fixed';
                        notification.style.top = '10px';
                        notification.style.right = '10px';
                        notification.style.padding = '10px';
                        notification.style.backgroundColor = '#BEBEBE';
                        notification.style.color = '#000';
                        notification.style.zIndex = '1000';
                        document.body.appendChild(notification);

                        setTimeout(() => {
                            window.location.href = '/Home/Blog';
                        }, 1000);

                        setTimeout(() => {
                            document.body.removeChild(notification);
                        }, 2000);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        const errorNotification = document.createElement('div');
                        errorNotification.textContent = 'Error submitting feedback. Please try again.';
                        errorNotification.style.position = 'fixed';
                        errorNotification.style.top = '10px';
                        errorNotification.style.right = '10px';
                        errorNotification.style.padding = '10px';
                        errorNotification.style.backgroundColor = '#FFCCCC';
                        errorNotification.style.color = '#000';
                        errorNotification.style.zIndex = '1000';
                        document.body.appendChild(errorNotification);

                        setTimeout(() => {
                            document.body.removeChild(errorNotification);
                        }, 3000);
                    });
            });
            //end submit
        });
    </script>
</body>