using System;
using System.Collections.Generic;

namespace ZestyBiteWebAppSolution.Models.Entities;

public partial class Feedback
{
    public int FbId { get; set; }
    public string FbContent { get; set; } = null!;
    public DateTime FbDatetime { get; set; }
    public string Username { get; set; } = null!;
    public int ItemId { get; set; }
    public int? ParentFbFlag { get; set; }
    // Navigation Properties
    public virtual ICollection<Feedback> InverseParentFbFlagNavigation { get; set; } = new List<Feedback>();
    public virtual Item Item { get; set; } = null!;
    public virtual Feedback? ParentFbFlagNavigation { get; set; }
    public virtual Account UsernameNavigation { get; set; } = null!;
}


using System;
using System.ComponentModel.DataAnnotations;

namespace ZestyBiteWebAppSolution.Models.DTOs
{
    public class FeedbackDTO
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Feedback content is required.")]
        public string Content { get; set; } = null!;
        public DateTime DateTime { get; set; }
        public string? ProfileImage { get; set; }
        public int ItemId { get; set; }
        public string ItemName { get; set; } = null!;
        public int? ParentFb { get; set; } = null!;
        //to include parent feedback if needed
        public FeedbackDTO? ParentFeedback { get; set; }
        public bool IsReply { get; set; }
    }
}

using System;
using System.ComponentModel.DataAnnotations;

namespace ZestyBiteWebAppSolution.Models.DTOs
{
    public class ReplyDTO
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Reply content is required.")]
        public string Content { get; set; } = null!;
        public DateTime DateTime { get; set; }
        public string Username { get; set; } = null!;
        public string? ProfileImage { get; set; }
        public int ItemId { get; set; }
        public string ItemName { get; set; } = null!;
        public int ParentFb { get; set; } 
    }
}

using Microsoft.EntityFrameworkCore;
using ZestyBiteWebAppSolution.Data;
using ZestyBiteWebAppSolution.Models.Entities;
using ZestyBiteWebAppSolution.Repositories.Interfaces;

namespace ZestyBiteWebAppSolution.Repositories.Implementations
{
    public class FeedbackRepository : IRepository<Feedback>, IFeedbackRepository
    {
        private readonly ZestyBiteContext _context;

        public FeedbackRepository(ZestyBiteContext context)
        {
            _context = context;
        }

        public async Task<IEnumerable<Feedback>> GetFeedbacksByItemIdAsync(int itemId)
        {
            return await _context.Feedbacks
                .Where(f => f.ItemId == itemId) // Exclude replies
                .Include(f => f.UsernameNavigation)
                .Include(f => f.Item)
                .OrderByDescending(f => f.FbDatetime)
                .ToListAsync();
        }

        public async Task<Feedback?> GetByIdAsync(int id) => await _context.Feedbacks.FindAsync(id);

        // Rely on the generic IRepository<T> methods for basic CRUD:
        public async Task<IEnumerable<Feedback>> GetAllFeedbacksAsync(int pageNumber, int pageSize)
        {
            var offset = (pageNumber - 1) * pageSize;
            return await _context.Feedbacks
                .Include(f => f.UsernameNavigation) // Include related entities
                .Include(f => f.Item)
                .OrderByDescending(f => f.FbDatetime)
                .Skip(offset)
                .Take(pageSize)
                .ToListAsync();
        }
        public async Task<IEnumerable<Feedback?>> GetAllAsync()
        {
            return await _context.Feedbacks
                .Include(f => f.UsernameNavigation)
                .Include(f => f.Item)
                .Include(f => f.ParentFbFlagNavigation)
                .ToListAsync();
        }

        public async Task<Feedback> CreateAsync(Feedback feedback)
        {
            _context.Feedbacks.Add(feedback);
            await _context.SaveChangesAsync();
            return feedback;
        }
        public async Task<Feedback> UpdateAsync(Feedback feedback)
        {
            _context.Feedbacks.Update(feedback);
            await _context.SaveChangesAsync();
            return feedback;
        }

        public async Task<Feedback> DeleteAsync(Feedback feedback)
        {
            _context.Feedbacks.Remove(feedback);
            await _context.SaveChangesAsync();
            return feedback;
        }

        // CRUD for reply
        public async Task<IEnumerable<Feedback>> GetFeedbackRepliesAsync(int ParentFb)
        {
            return await _context.Feedbacks
                .Where(f => f.ParentFbFlag == ParentFb)
                .Include(f => f.UsernameNavigation)
                .OrderBy(f => f.FbDatetime) // Oldest first
                .ToListAsync();
        }
        public async Task<Feedback> CreateReplyAsync(Feedback reply)
        {
            _context.Feedbacks.Add(reply);
            await _context.SaveChangesAsync();
            return reply;
        }
        public async Task<Feedback> UpdateReplyAsync(Feedback reply)
        {
            _context.Feedbacks.Update(reply);
            await _context.SaveChangesAsync();
            return reply;
        }
        public async Task<bool> DeleteReplyAsync(Feedback reply)
        {
            _context.Feedbacks.Remove(reply);
            await _context.SaveChangesAsync();
            return true;
        }
    }
}


using AutoMapper;
using ZestyBiteWebAppSolution.Models.DTOs;
using ZestyBiteWebAppSolution.Models.Entities;
using ZestyBiteWebAppSolution.Repositories.Interfaces;
using ZestyBiteWebAppSolution.Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Operations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;

namespace ZestyBiteWebAppSolution.Services.Implementations
{
    public class FeedbackService : IFeedbackService
    {
        private readonly IFeedbackRepository _feedbackRepository;
        private readonly IAccountRepository _accountRepository;
        private readonly IItemRepository _itemRepository;
        private readonly IMapper _mapper;

        public FeedbackService(IFeedbackRepository feedbackRepository, IAccountRepository accountRepository, IItemRepository itemRepository, IMapper mapper)
        {
            _feedbackRepository = feedbackRepository ?? throw new ArgumentNullException(nameof(feedbackRepository));
            _accountRepository = accountRepository ?? throw new ArgumentNullException(nameof(accountRepository));
            _itemRepository = itemRepository ?? throw new ArgumentNullException(nameof(itemRepository));
            _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        }

        // CRUD Feedback
        public async Task<IEnumerable<FeedbackDTO>> GetFeedbacksByPageAsync(int pageNumber, int pageSize)
        {
            var feedbacks = await _feedbackRepository.GetAllFeedbacksAsync(pageNumber, pageSize);
            return _mapper.Map<IEnumerable<FeedbackDTO>>(feedbacks);
        }

        public async Task<IEnumerable<FeedbackDTO?>> GetAllFeedbacksAsync()
        {
            var usn = await _accountRepository.GetAllAsync();

            var feedbacks = await _feedbackRepository.GetAllAsync();
            return _mapper.Map<IEnumerable<FeedbackDTO>>(feedbacks);
        }

        public async Task<IEnumerable<FeedbackDTO>> GetFeedbacksByItemIdAsync(int itemId)
        {
            var feedbacks = await _feedbackRepository.GetFeedbacksByItemIdAsync(itemId);
            return _mapper.Map<IEnumerable<FeedbackDTO>>(feedbacks);
        }

        //[AllowAnonymous]
        [Authorize]
        public async Task<FeedbackDTO> SubmitFeedbackAsync(FeedbackDTO feedbackDto, string usn)
        {
            if (feedbackDto == null)
            {
                throw new ArgumentNullException(nameof(feedbackDto));
            }

            var account = await _accountRepository.GetAccountByUsnAsync(usn);
            var item = await _itemRepository.GetByIdAsync(feedbackDto.ItemId);
            if (account == null) throw new InvalidOperationException("Invalid Account.");
            if (item == null) throw new InvalidOperationException("Invalid Item.");

            var feedback = _mapper.Map<Feedback>(feedbackDto);
            feedback.Username = usn;
            feedback.UsernameNavigation = account;
            feedback.Item = item;

            var createdFeedback = await _feedbackRepository.CreateAsync(feedback);
            return _mapper.Map<FeedbackDTO>(createdFeedback);
        }

        public async Task<FeedbackDTO> UpdateFeedbackAsync(FeedbackDTO feedbackDto)
        {
            if (feedbackDto == null)
            {
                throw new ArgumentNullException(nameof(feedbackDto));
            }

            var feedback = await _feedbackRepository.GetByIdAsync(feedbackDto.Id);
            if (feedback == null)
            {
                throw new InvalidOperationException("Feedback not found.");
            }

            var item = await _itemRepository.GetByIdAsync(feedbackDto.ItemId);
            if (item == null)
            {
                throw new InvalidOperationException("Invalid Item.");
            }

            feedback = _mapper.Map<Feedback>(feedbackDto);
            feedback.Item = item;

            var updatedFeedback = await _feedbackRepository.UpdateAsync(feedback);
            return _mapper.Map<FeedbackDTO>(updatedFeedback);
        }

        public async Task<bool> DeleteFeedbackAsync(int feedbackId)
        {
            var feedback = await _feedbackRepository.GetByIdAsync(feedbackId);
            if (feedback == null) return false;

            await _feedbackRepository.DeleteAsync(feedback);
            return true;
        }

        public async Task<IEnumerable<ItemDTO?>> GetAllItemsAsync()
        {
            var items = await _itemRepository.GetAllAsync();
            return _mapper.Map<IEnumerable<ItemDTO>>(items);
        }

        // CRUD Reply
        public async Task<IEnumerable<ReplyDTO>> GetRepliesByFeedbackAsync(int parentFbFlag)
        {
            var replies = await _feedbackRepository.GetFeedbackRepliesAsync(parentFbFlag);
            return _mapper.Map<IEnumerable<ReplyDTO>>(replies);
        }
        public async Task<FeedbackDTO> SubmitReplyAsync(int parentFbFlag, ReplyDTO replyDto, string usn)
        {
            if (replyDto == null)
            {
                throw new ArgumentNullException(nameof(replyDto));
            }

            // Retrieve account using username
            var account = await _accountRepository.GetAccountByUsnAsync(usn);
            var item = await _itemRepository.GetByIdAsync(replyDto.ItemId);

            if (account == null) throw new InvalidOperationException("Invalid Account.");
            if (item == null) throw new InvalidOperationException("Invalid Item.");

            var reply = new Feedback
            {
                FbContent = replyDto.Content,
                FbDatetime = DateTime.UtcNow,
                Username = usn,
                ItemId = replyDto.ItemId,
                ParentFbFlag = parentFbFlag,
                UsernameNavigation = account,
                Item = item
            };

            var submittedReply = await _feedbackRepository.CreateReplyAsync(reply);
            return _mapper.Map<FeedbackDTO>(submittedReply);
        }

        public async Task<FeedbackDTO> UpdateReplyAsync(ReplyDTO replyDto)
        {
            if (replyDto == null)
            {
                throw new ArgumentNullException(nameof(replyDto));
            }

            var existingReply = await _feedbackRepository.GetByIdAsync(replyDto.Id);
            if (existingReply == null)
            {
                throw new KeyNotFoundException("Reply not found.");
            }

            existingReply.FbContent = replyDto.Content;
            existingReply.FbDatetime = DateTime.UtcNow;

            var updatedReply = await _feedbackRepository.UpdateReplyAsync(existingReply);
            return _mapper.Map<FeedbackDTO>(updatedReply);
        }

        public async Task<bool> DeleteReplyAsync(int replyId)
        {
            var existingReply = await _feedbackRepository.GetByIdAsync(replyId);
            if (existingReply == null) return false;

            await _feedbackRepository.DeleteReplyAsync(existingReply);
            return true;
        }
    }
}

using Microsoft.AspNetCore.Mvc;
using ZestyBiteWebAppSolution.Models.DTOs;
using ZestyBiteWebAppSolution.Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace ZestyBiteWebAppSolution.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class FeedbackController : ControllerBase
    {
        private readonly IFeedbackService _feedbackService;

        public FeedbackController(IFeedbackService feedbackService)
        {
            _feedbackService = feedbackService;
        }

        // GET: api/feedback/items
        [HttpGet("items")]
        public async Task<ActionResult<IEnumerable<ItemDTO>>> GetItems()
        {
            var items = await _feedbackService.GetAllItemsAsync();
            return Ok(items);
        }

        // GET: api/feedback/allfeedbacks
        [HttpGet("allfeedbacks")]
        public async Task<ActionResult<IEnumerable<FeedbackDTO>>> GetAllFeedbacks()
        {
            try
            {
                var feedbacks = await _feedbackService.GetAllFeedbacksAsync();
                return Ok(feedbacks);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // GET: api/feedback/item/{itemId}
        [HttpGet("item/{itemId}")]
        public async Task<ActionResult<IEnumerable<FeedbackDTO>>> GetFeedbacksByItemId(int itemId)
        {
            try
            {
                var feedbacks = await _feedbackService.GetFeedbacksByItemIdAsync(itemId);
                return Ok(feedbacks);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // POST: api/feedback/submitfeedback
        [HttpPost("submitfeedback")]
        public async Task<ActionResult<FeedbackDTO>> SubmitFeedback([FromBody] FeedbackDTO feedbackDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            try
            {
                string username = User.Identity.Name;
                var submittedFeedback = await _feedbackService.SubmitFeedbackAsync(feedbackDto, username);
                return CreatedAtAction(nameof(GetFeedbacksByItemId), new { itemId = submittedFeedback.ItemId }, submittedFeedback);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // PUT: api/feedback
        [HttpPut]
        public async Task<ActionResult<FeedbackDTO>> UpdateFeedback([FromBody] FeedbackDTO feedbackDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            try
            {
                var updatedFeedback = await _feedbackService.UpdateFeedbackAsync(feedbackDto);
                return Ok(updatedFeedback);
            }
            catch (InvalidOperationException ex)
            {
                return NotFound(new { Message = ex.Message });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // GET: api/feedback/feedbackpagination
        [HttpGet("feedbackpagination")]
        public async Task<IActionResult> GetFeedbacksByPage(int pageNumber, int pageSize)
        {
            var feedbacks = await _feedbackService.GetFeedbacksByPageAsync(pageNumber, pageSize);
            return Ok(feedbacks);
        }

        // DELETE: api/feedback/{id}
        [HttpDelete("{id}")]
        public async Task<ActionResult> DeleteFeedback(int id)
        {
            try
            {
                var result = await _feedbackService.DeleteFeedbackAsync(id);
                if (result)
                {
                    return NoContent();
                }
                return NotFound(new { Message = "Feedback not found" });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // CRUD Reply
        // GET: api/feedback/replies/{parentFb}
        [HttpGet("replies/{parentFb}")]
        public async Task<ActionResult<IEnumerable<ReplyDTO>>> GetRepliesForFeedback(int parentFb)
        {
            try
            {
                var replies = await _feedbackService.GetRepliesByFeedbackAsync(parentFb);
                return Ok(replies);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // POST: api/feedback/reply
        [HttpPost("reply")]
        public async Task<ActionResult<ReplyDTO>> SubmitReply([FromBody] ReplyDTO replyDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            try
            {
                string username = User.Identity.Name;
                var submittedReply = await _feedbackService.SubmitReplyAsync(replyDto.ParentFb, replyDto, username);
                return CreatedAtAction(nameof(GetRepliesForFeedback), new { parentFb = submittedReply.ParentFb }, submittedReply);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // PUT: api/feedback/reply
        [HttpPut("reply")]
        public async Task<ActionResult<ReplyDTO>> UpdateReply([FromBody] ReplyDTO replyDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            try
            {
                var updatedReply = await _feedbackService.UpdateReplyAsync(replyDto);
                return Ok(updatedReply);
            }
            catch (InvalidOperationException ex)
            {
                return NotFound(new { Message = ex.Message });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // DELETE: api/feedback/reply/{id}
        [HttpDelete("reply/{id}")]
        public async Task<ActionResult> DeleteReply(int id)
        {
            try
            {
                var result = await _feedbackService.DeleteReplyAsync(id);
                if (result)
                {
                    return NoContent();
                }
                return NotFound(new { Message = "Reply not found" });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }
}